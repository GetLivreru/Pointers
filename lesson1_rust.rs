/**
 * УРОК 1: УКАЗАТЕЛИ И ССЫЛКИ В RUST
 * 
 * В Rust есть два типа "указателей":
 * 1. Ссылки (&) - безопасные, проверяются компилятором
 * 2. Сырые указатели (*) - небезопасные, как в C++
 * 
 * Rust предпочитает ССЫЛКИ, потому что они безопасны!
 */

fn main() {
    println!("=== УРОК 1: Ссылки в Rust ===");
    
    // 1. Обычная переменная
    let number = 42;
    println!("Переменная number = {}", number);
    
    // 2. Создаем ссылку (это НЕ указатель, а ссылка!)
    let ref_number = &number;  // & = создать ссылку
    
    println!("Ссылка ref_number = {:p}", ref_number);  // {:p} = адрес
    println!("Значение через ссылку = {}", *ref_number);  // * = разыменование
    
    // 3. Rust НЕ ПОЗВОЛЯЕТ изменять через обычную ссылку!
    // *ref_number = 100; // ❌ ОШИБКА! Обычные ссылки immutable
    
    // 4. Для изменения нужна МУТАБЕЛЬНАЯ ссылка
    let mut mutable_number = 42;  // mut = изменяемая переменная
    
    println!("\nДо изменения: {}", mutable_number);
    
    {
        let ref_mut = &mut mutable_number;  // &mut = мутабельная ссылка
        *ref_mut = 100;  // Теперь можно изменять!
    } // ref_mut "умирает" здесь
    
    println!("После изменения: {}", mutable_number);
    
    // 5. ГЛАВНОЕ ПРАВИЛО RUST: одна мутабельная ссылка ИЛИ много обычных
    println!("\n=== БЕЗОПАСНОСТЬ RUST ===");
    println!("Rust не позволяет создать:");
    println!("- Две мутабельные ссылки одновременно");
    println!("- Мутабельную и обычную ссылку одновременно");
    println!("Это предотвращает ошибки памяти!");
    
    // 6. Сравнение с C++
    println!("\n=== СРАВНЕНИЕ С C++ ===");
    println!("C++:   int* ptr = &var;  // Может быть опасно");
    println!("Rust:  let ref_var = &var;  // Всегда безопасно");
}
